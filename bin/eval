#!/bin/python
# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Imports
# -----------------------------------------------------------------------------
import sys

import torch

sys.path.append('./src')

from pytorch_common.util import get_device, set_device_name

import logging

from torch import nn
from torch.optim import Adam

from model import Loss, AttentionSeqToSeqModel, ModelManager

from logger import initialize_logger
import click

from torchtext.legacy.data import BucketIterator

from data import DatasetLoader
from field_factory import FieldFactory


# -----------------------------------------------------------------------------
#
#
#
#
#
# -----------------------------------------------------------------------------
# Main
# -----------------------------------------------------------------------------
@click.command()
@click.option('--dataset-path', default='./dataset', help='Dataset path (Default: ./dataset)')
@click.option('--batch-size', default=128, help='Batch size (Default: 128)')
@click.option('--origin-language-model', default='de_core_news_sm', help='Origin language (Default: de_core_news_sm')
@click.option('--target-language-model', default='en_core_web_sm', help='Target language (Default: en_core_web_sm)')
@click.option('--origin-min-freq', default=2, help='Origin language word min frequency (Default: 2)')
@click.option('--target-min-freq', default=2, help='Target language word min frequency (Default: 2)')
@click.option('--weights-path', help='Weights file path')
@click.option('--source-embedding-dim', default=256, help='Source language embedding dimension (Default: 256)')
@click.option('--target-embedding-dim', default=256, help='Target language embedding dimension (Default: 256)')
@click.option('--rnn-hidden-state-dim', default=256, help='Rnn hidden state dimension (Default: 256)')
@click.option('--dropout', default=0.5, help='Dropout (Default: 0.5)')
@click.option('--learning-rate', default=0.001, help='Learning rate (Default: 0.001)')
@click.option(
    '--device',
    default='gpu',
    help='Device used to train and optimize model. Values: gpu(Default) or cpu(Fallback).'
)
def main(
        dataset_path,
        batch_size,
        origin_language_model,
        target_language_model,
        origin_min_freq,
        target_min_freq,
        weights_path,
        device,
        source_embedding_dim,
        target_embedding_dim,
        rnn_hidden_state_dim,
        dropout,
        learning_rate
):
    initialize_logger()
    set_device_name(device)

    source_field = FieldFactory.create(origin_language_model)
    target_field = FieldFactory.create(target_language_model)

    loader = DatasetLoader(source_field, target_field)

    train_data = loader.load(f'{dataset_path}/train.json')
    test_data = loader.load(f'{dataset_path}/test.json')

    test_iterator = BucketIterator.splits(
        test_data,
        batch_size=batch_size,
        sort=False,
        device=get_device()
    )

    source_field.build_vocab(train_data, min_freq=origin_min_freq)
    target_field.build_vocab(train_data, min_freq=target_min_freq)

    model = AttentionSeqToSeqModel(
        source_vocab_dim=len(source_field.vocab),
        target_vocab_dim=len(target_field.vocab),
        enc_embedding_dim=source_embedding_dim,
        dec_embedding_dim=target_embedding_dim,
        enc_dropout=dropout,
        dec_dropout=dropout,
        enc_hidden_state_dim=rnn_hidden_state_dim,
        dec_hidden_state_dim=rnn_hidden_state_dim
    )
    model.load_state_dict(torch.load(weights_path))
    model.to(get_device())

    model_manager = ModelManager(
        model,
        optimizer=Adam(model.parameters(), lr=learning_rate),
        loss_fn=Loss(
            loss_fn=nn.CrossEntropyLoss(ignore_index=target_field.vocab.stoi[target_field.pad_token]),
            target_vocab_dim=len(target_field.vocab)
        )
    )

    logging.info(f'Validation loss: {model_manager.validation(test_iterator)}')


if __name__ == '__main__':
    main()
# -----------------------------------------------------------------------------
